<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><link media="all" href="Object%20Oriented%20Programming%20in%20PHP_files/widget115.css" type="text/css" rel="stylesheet">
<title>Object Oriented Programming in PHP</title>
<link rel="shortcut icon" href="http://www.tutorialspoint.com/favicon.ico" type="image/x-icon">
<meta name="Keywords" content="Learning, PHP, Programming, Language, Built-in Function, Library, Web Design,Object Oriented PHP, PHP Variables, Scalars, Arrays, Hash, File I/O, Looping, Regular Expressions, Subroutines, Coding Standard, Writing Modules, File Management, Socket, Examples, Reference, Special Variables, Syntax Overview, Advanced PHP, Tutorial, Tutorials, Operators, GET, POST, Predefined">
<meta name="Description" content="Object Oriented Programming in PHP - A simple and short PHP tutorial and complete reference manual for all built-in PHP functions. This tutorial is designed for beginners to adavnced developers. You will learn PHP Built-in Function Predefined Variables Examples Object Oriented Numbers Scalars Arrays Hash File I/O IF ELSEIF Do While Loops Operators Regular Expressions GET POST Subroutines Coding Standard Modules File Management Socket Communication  Reference Special Variables Syntax Overview Advanced PHP">
<meta http-equiv="pragma" content="no-cache">
<meta http-equiv="cache-control" content="no-cache">
<!-- base href="http://www.tutorialspoint.com/" -->
<link rel="stylesheet" type="text/css" href="Object%20Oriented%20Programming%20in%20PHP_files/tp.css">
<script src="Object%20Oriented%20Programming%20in%20PHP_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
<div id="_atssh" style="visibility: hidden; height: 1px; width: 1px; position: absolute; z-index: 100000;"><iframe src="Object%20Oriented%20Programming%20in%20PHP_files/sh122.htm" style="height: 1px; width: 1px; position: absolute; z-index: 100000; border: 0px none; left: 0px; top: 0px;" title="AddThis utility frame" id="_atssh721"></iframe></div><script src="Object%20Oriented%20Programming%20in%20PHP_files/core084.js" type="text/javascript"></script></head>
<body>
<center>
<table class="main" border="0" cellpadding="2" cellspacing="0">
<tbody><tr>
<td class="content" align="left" valign="top">
<a href="http://www.tutorialspoint.com/index.htm"><img src="Object%20Oriented%20Programming%20in%20PHP_files/tp-logo.gif" alt="Tutorials Point" border="0"></a>
<br>
<br>
<div class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tbody><tr><td align="center" height="32" nowrap="nowrap" valign="top">
<a href="http://www.google.com/">
<img src="Object%20Oriented%20Programming%20in%20PHP_files/Logo_25wht.gif" alt="Google" align="middle" border="0"></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input name="domains" value="www.tutorialspoint.com" type="hidden">
<input name="q" size="18" maxlength="255" type="text">
<input name="sa" style="width:20px;font-weight:bold" value="..." type="submit">
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tbody><tr>
<td>
<input name="sitesearch" value="" checked="checked" type="radio">
<font color="#000000" size="-1">Web</font>
</td>
<td>
<input name="sitesearch" value="www.tutorialspoint.com" type="radio">
<font color="#000000" size="-1">This Site</font>
</td>
</tr>
</tbody></table>
<input name="client" value="pub-7133395778201029" type="hidden">
<input name="forid" value="1" type="hidden">
<input name="ie" value="ISO-8859-1" type="hidden">
<input name="oe" value="ISO-8859-1" type="hidden">
<input name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1" type="hidden">
<input name="hl" value="en" type="hidden">
</td></tr></tbody></table>
</form>
<!-- SiteSearch Google -->
</div>
<br>
&nbsp;&nbsp;<b>Learning PHP</b>
<div class="left">
<ul class="menu">
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/index.htm">PHP Home</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_introduction.htm">PHP Introduction</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_environment.htm">PHP Environment</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_syntax_overview.htm">PHP Syntax Overview</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_variable_types.htm">PHP Variable Types</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_constants.htm">PHP Constants</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_operator_types.htm">PHP Operator Types</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_decision_making.htm">PHP Decision Making</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_loop_types.htm">PHP Loop Types </a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_arrays.htm">PHP Arrays</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_strings.htm">PHP Strings</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_web_concepts.htm">PHP Web Concepts</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_get_post.htm">PHP GET &amp; POST</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_file_inclusion.htm">PHP File Inclusion</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_files.htm">PHP Files &amp; I/O</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_functions.htm">PHP Functions</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_cookies.htm">PHP Cookies</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_sessions.htm">PHP Sessions</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_sending_emails.htm">PHP Sending Emails</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_file_uploading.htm">PHP File Uploading</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_coding_standard.htm">PHP Coding Standard</a></li>
</ul>
</div>
<br>
&nbsp;&nbsp;<b>Advanced PHP</b>
<div class="left">
<ul class="menu">
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_predefined_variables.htm">PHP Predefined Variables</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_regular_expression.htm">PHP Regular Expression</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_error_handling.htm">PHP Error Handling</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_bugs_debugging.htm">PHP Bugs Debugging</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_date_and_time.htm">PHP Date &amp; Time</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_and_mysql.htm">PHP and MySQL</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_and_ajax.htm">PHP and AJAX</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_and_xml.htm">PHP and XML</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_object_oriented.htm"><b>PHP Object Oriented</b></a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_for_c_developers.htm">PHP for C Developers</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_for_perl_developers.htm">PHP for Perl Developers</a></li>
</ul>
</div>
<br>
&nbsp;&nbsp;<b>PHP Function Reference</b>
<div class="left">
<ul class="menu">
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_function_reference.htm">PHP Built-in Functions</a></li>
</ul>
</div>
<br>
&nbsp;&nbsp;<b>PHP Useful Resources</b>
<div class="left">
<ul class="menu">
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/php/php_useful_resources.htm">PHP Useful Resources</a></li>
</ul>
</div>
<br>
&nbsp;&nbsp;<b>Selected Reading</b>
<div class="left">
<ul class="menu">
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/computer_glossary.htm">Computer Glossary</a></li>
<li><a class="left" target="_top" href="http://www.tutorialspoint.com/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<br><br>
<small>Â© 2013 TutorialsPoint.COM </small>
</td>
<td align="left" valign="top">
<br><br>
<table cellpadding="0" cellspacing="0">
<tbody><tr valign="middle">
<td style="width:20px;"></td>
<td class="top">
&nbsp;&nbsp;<a class="top" href="http://www.tutorialspoint.com/index.htm">Home</a>&nbsp;&nbsp;
</td>
<td style="width:20px;"></td>
<td class="top">
&nbsp;&nbsp;<a class="top" href="http://www.tutorialspoint.com/references.htm">References</a>&nbsp;&nbsp;
</td>
<td style="width:20px;"></td>
<td class="top">
&nbsp;&nbsp;<a class="top" href="http://www.tutorialspoint.com/forums/index.php">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td style="width:10px;"></td>
<td class="top">
&nbsp;&nbsp;<a class="top" href="http://www.tutorialspoint.com/about/index.htm">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</tbody></table>
<table class="middle" cellpadding="5" cellspacing="0">
<tbody><tr>
<td align="left">
<!-- PRINTING STARTS HERE -->
<h1>Object Oriented Programming in PHP</h1>
<hr>
<a href="http://www.tutorialspoint.com/php/php_and_xml.htm"><img alt="previous" src="Object%20Oriented%20Programming%20in%20PHP_files/previous.gif" border="0"></a>
<a href="http://www.tutorialspoint.com/php/php_for_c_developers.htm"><img alt="next" src="Object%20Oriented%20Programming%20in%20PHP_files/next.gif" border="0"></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="Object%20Oriented%20Programming%20in%20PHP_files/add-this.gif" alt="AddThis Social Bookmark Button" border="0"></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="Object%20Oriented%20Programming%20in%20PHP_files/widget.htm"></script>
<!-- AddThis Bookmark Button END -->
<br>
<br>
<hr><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript" src="Object%20Oriented%20Programming%20in%20PHP_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><ins id="aswift_0_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;" frameborder="0" height="60" scrolling="no" width="468"></iframe></ins></ins>
<hr>
<p>We can imagine our universe made of different objects like sun, 
earth, moon etc. Similarly we can imagine our car made of different 
objects like wheel, steering, gear etc. Same way  there is object 
oriented programming concepts which assume everything as an object and 
implement a software using different objects.</p>
<h2>Object Oriented Concepts:</h2>
<p>Before we go in detail, lets define important terms related to  Object Oriented Programming.</p>
<ul>
<li><p><b>Class:</b> This is a programmer-defined datatype, which 
includes local functions as well as local data. You can think of a class
 as a template for making many instances of the same kind (or class) of 
object.</p></li>
<li><p><b>Object:</b> An individual instance of the data structure 
defined by a class. You define a class once and then make many objects 
that belong to it. Objects are also known as instance.</p></li>
<li><p><b>Member Variable:</b> These are the variables defined inside a 
class. This data will be invisible to the outside of the class and can 
be accessed via member functions. These variables are called attribute 
of the object once an object is created.</p></li>
<li><p><b>Member function:</b> These are the function defined inside a class and are used to access object data.</p></li>
<li><p><b>Inheritance:</b> When a class is defined by inheriting 
existing function of a parent class then it is called inheritance. Here 
child class will inherit all or few member functions and variables of a 
parent class.</p></li>
<li><p><b>Parent class:</b> A class that is inherited from by another class. This is also called a base class or super class.</p></li>
<li><p><b>Child Class:</b> A class that inherits from another class. This is also called a subclass or derived class.</p></li>
<li><p><b>Polymorphism:</b> This is an object oriented concept where 
same function can be used for different purposes. For example function 
name will remain same but it make take different number of arguments and
 can do different task.</p></li>
<li><p><b>Overloading:</b> a type of polymorphism in which some or all 
of operators have different implementations depending on the types of 
their arguments. Similarly functions can also be overloaded with 
different implementation.</p></li>
<li><p><b>Data Abstraction:</b> Any representation of data in which the implementation details are hidden (abstracted).</p></li>
<li><p><b>Encapsulation:</b> refers to a concept where we encapsulate all the data and member functions together to form an object.</p></li>
<li><p><b>Constructor:</b> refers to a special type of  function which will be called automatically whenever there is an object formation from a class.</p></li>
<li><p><b>Destructors:</b> refers to a special type of function which will be called automatically whenever an object is deleted or goes out of scope.</p></li>
</ul>
<h2>Defining PHP Classes:</h2>
<p>The general form for defining a new class in PHP is as follows:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>&lt;?php
class phpClass{
   var $var1;
   var $var2 = "constant string";
   function myfunc ($arg1, $arg2) {
      [..]
   }
   [..]
}
?&gt;
</pre></td></tr></tbody></table>
<p>Here is the description of each line:</p>
<ul>
<li><p>The special form <b>class</b>, followed by the name of the class that you want to define.</p></li>
<li><p>A set of braces enclosing any number of variable declarations and function definitions.</p></li>
<li><p>Variable declarations start with the special form <b>var</b>, which is followed by a conventional $ variable name; they may also have an initial assignment to a constant value.</p></li>
<li><p>Function definitions look much like standalone PHP functions but 
are local to the class and will be used to set and access object data.</p></li>
</ul>
<h3>Example:</h3>
<p>Here is an example which defines a class of Books type:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>&lt;?php
class  Books{
    /* Member variables */
    var $price;
    var $title;
    /* Member functions */
    function setPrice($par){
       $this-&gt;price = $var;
    }
    function getPrice(){
       echo $this-&gt;price ."&lt;br/&gt;";
    }
    function setTitle($par){
       $this-&gt;title = $par;
    }
    function getTitle(){
       echo $this-&gt;title ." &lt;br/&gt;";
    }
}
?&gt;
</pre></td></tr></tbody></table>
<p>The variable <b>$this</b> is a special variable and it refers to the same object ie. itself.</p>
<h2>Creating Objects in PHP</h2>
<p>Once you defined your class, then you can create as many objects as 
you like of that class type. Following is an example of how to create 
object using <b>new</b> operator.</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>   $physics = new Books;
   $maths = new Books;
   $chemistry = new Books;
</pre></td></tr></tbody></table>
<p>Here we have created three objects and these objects are independent 
of each other and they will have their existance separately. Next we 
will see how to access member function and process member variables.</p>
<h2>Calling Member Functions</h2>
<p>After creating your objects, you will be able to call member 
functions related to that object. One member function will be able to 
process member variable of related object only.</p>
<p>Following example shows how to set title and prices for the three books by calling member functions.</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>   $physics-&gt;setTitle( "Physics for High School" );
   $chemistry-&gt;setTitle( "Advanced Chemistry" );
   $maths-&gt;setTitle( "Algebra" );

   $physics-&gt;setPrice( 10 );
   $chemistry-&gt;setPrice( 15 );
   $maths-&gt;setPrice( 7 );
</pre></td></tr></tbody></table>
<p>Now you call another member functions to get the values set by in above example:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>   $physics-&gt;getTitle();
   $chemistry-&gt;getTitle();
   $maths-&gt;getTitle();
   $physics-&gt;getPrice();
   $chemistry-&gt;getPrice();
   $maths-&gt;getPrice();
</pre></td></tr></tbody></table>
<p>This will produce follwoing result:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>  Physics for High School
  Advanced Chemistry
  Algebra
  10
  15
  7
</pre></td></tr></tbody></table>
<h2>Constructor Functions:</h2>
<p>Constructor Functions are special type of functions which are called 
automatically whenever an object is created. So we take full advantage 
of this behaviour, by initializing many things through constructor 
functions. </p>
<p>PHP provides a special function called <b>__construct()</b> to define a constructor. You can pass as many as arguments you like into the constructor function.</p>
<p>Following example will create one constructor for Books class and it 
will initialize price and title for the book at the time of object 
creation.</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>function __construct( $par1, $par2 ){
   $this-&gt;price = $par1;
   $this-&gt;title = $par2;
}
</pre></td></tr></tbody></table>
<p>Now we don't need to call set function separately to set price and 
title. We can initialize these two member variables at the time of 
object creation only. Check following example below:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>   $physics = new Books( "Physics for High School", 10 );
   $maths = new Books ( "Advanced Chemistry", 15 );
   $chemistry = new Books ("Algebra", 7 );

   /* Get those set values */
   $physics-&gt;getTitle();
   $chemistry-&gt;getTitle();
   $maths-&gt;getTitle();

   $physics-&gt;getPrice();
   $chemistry-&gt;getPrice();
   $maths-&gt;getPrice();
</pre></td></tr></tbody></table>
<p>This will produce following result:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>  Physics for High School
  Advanced Chemistry
  Algebra
  10
  15
  7
</pre></td></tr></tbody></table>
<h2>Destructor:</h2>
<p>Like a constructor function you can define a destructor function using function <b>__destruct()</b>. You can release all the resourceses with-in a destructor.</p>
<h2>Inheritance:</h2>
<p>PHP class definitions can optionally inherit from a parent class definition by using the
extends clause. The syntax is as follows:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>  class Child extends Parent {
     &lt;definition body&gt;
  }
</pre></td></tr></tbody></table>
<p>The effect of inheritance is that the child class (or subclass or derived class) has the following characteristics:</p>
<ul>
<li><p>Automatically has all the member variable declarations of the parent class.</p></li>
<li><p>Automatically has all the same member functions as the parent, 
which (by default) will work the same way as those functions do in the 
parent.</p></li>
</ul>
<p>Following example inherit Books class and adds more functionality based on the requirement.</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>class Novel extends Books{
   var publisher;
   function setPublisher($par){
     $this-&gt;publisher = $par;
   }
   function getPublisher(){
     echo $this-&gt;publisher. "&lt;br /&gt;";
   }
}
</pre></td></tr></tbody></table>
<p>Now apart from inherited functions, class Novel keeps two additional member functions.</p>
<h2>Function Overriding:</h2>
<p>Function definitions in child classes override definitions with the 
same name in parent classes. In a child class, we can modify the 
definition of a function inherited from parent class.</p>
<p>In the follwoing example getPrice and getTitle functions are overriden to retrun some values.</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>    function getPrice(){
       echo $this-&gt;price . "&lt;br/&gt;";
       return $this-&gt;price;
    }
    function getTitle(){
       echo $this-&gt;title . "&lt;br/&gt;";
       return $this-&gt;title;
    }
</pre></td></tr></tbody></table>
<h2>Public Members:</h2>
<p>Unless you specify otherwise, properties and methods of a class are 
public. That is to say, they may be accessed in three possible 
situations:</p>
<ul>
<li><p>From outside the class in which it is declared</p></li>
<li><p>From within the class in which it is declared</p></li>
<li><p>From within another class that implements the class in which it is declared</p></li>
</ul>
<p>Till now we have seen all members as public members.  If you wish to 
limit the accessibility of the members of a class then you define class 
members as <b>private</b> or  <b>protected</b>.</p>
<h2>Private members:</h2>
<p>By designating a member private, you limit its accessibility to the 
class in which it is declared. The private member cannot be referred to 
from classes that inherit the class in which it is declared and cannot 
be accessed from outside the class.</p>
<p>A class member can be made private by using <b>private</b> keyword infront of the member.</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>class MyClass {
   private $car = "skoda";
   $driver = "SRK";

   function __construct($par) {
      // Statements here run every time
      // an instance of the class
      // is created.
   }
   function myPublicFunction() {
      return("I'm visible!");
   }
   private function myPrivateFunction() {
      return("I'm  not visible outside!");
   }
}
</pre></td></tr></tbody></table>
<p>When <i>MyClass</i> class is inherited by another class using 
extends, myPublicFunction() will be visible, as will $driver. The 
extending class will not have any awareness of or access to 
myPrivateFunction and $car, because they are declared private.</p>
<h2>Protected members:</h2>
<p>A protected property or method is accessible in the class in which it
 is declared, as well as in classes that extend that class. Protected 
members are not available outside of those two kinds of classes. A class
 member can be made protected by using  <b>protected</b> keyword infront of the member.</p>
<p>Here is different version of MyClass:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>class MyClass {
   protected $car = "skoda";
   $driver = "SRK";

   function __construct($par) {
      // Statements here run every time
      // an instance of the class
      // is created.
   }
   function myPublicFunction() {
      return("I'm visible!");
   }
   protected function myPrivateFunction() {
      return("I'm  visible in child class!");
   }
}
</pre></td></tr></tbody></table>
<h2>Interfaces:</h2>
<p>Interfaces are defined to provide a common  function names to the 
implementors. Different implementors can implement those interfaces 
according to theri requirements. You can say, interfaces are skeltons 
which are implemented by developers.</p>
<p>As of PHP5, it is possible to define an interface, like this:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>interface Mail {
   public function sendMail();
}
</pre></td></tr></tbody></table>
<p>Then, if another class implemented that interface, like this:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>class Report implements Mail {
   // sendMail() Definition goes here
}
</pre></td></tr></tbody></table>
<h2>Constants:</h2>
<p>A constant is somewhat like a variable, in that it holds a value, but
 is really more like a function because a constant is immutable. Once 
you declare a constant, it does not change.</p>
<p>Declaring one  constant is easy, as is done in this version of MyClass:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>class MyClass {
   const requiredMargin = 1.7;
   function __construct($incomingValue) {
      // Statements here run every time
      // an instance of the class
      // is created.
   }
}
</pre></td></tr></tbody></table>
<p>In this class, requiredMargin is a constant. It is declared with the 
keyword const, and under no circumstances can it be changed to anything 
other than 1.7. Note that the constant's name does not have a leading $,
 as variable names do.</p>
<h2>Abstract Classes:</h2>
<p>An abstract class is one that cannot be instantiated, only inherited. You declare an abstract class with the keyword <b>abstract</b>, like this:</p>
<p>When inheriting from an abstract class, all methods marked abstract 
in the parent's class declaration must be defined by the child; 
additionally, these methods must be defined with the same visibillity.</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>abstract class MyAbstractClass {
   abstract function myAbstractFunction() {
   }
}
</pre></td></tr></tbody></table>
<p>Note that function definitions inside an abstract class must also be 
preceded by the keyword abstract. It is not legal to have abstract 
function definitions inside a non-abstract class.</p>
<h2>Static Keyword:</h2>
<p>Declaring class members or methods as static makes them accessible 
without needing an instantiation of the class. A member declared as 
static can not be accessed with an instantiated class object (though a 
static method can).</p>
<p>Try out following example:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>&lt;?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}
print Foo::$my_static . "\n";
$foo = new Foo();
print $foo-&gt;staticValue() . "\n";
</pre></td></tr></tbody></table>
<h2>Final Keyword:</h2>
<p>PHP 5 introduces the final keyword, which prevents child classes from
 overriding a method by prefixing the definition with final. If the 
class itself is being defined final then it cannot be extended.</p>
<p>Following example results in Fatal error: Cannot override final method BaseClass::moreTesting()</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>&lt;?php
class BaseClass {
   public function test() {
       echo "BaseClass::test() called&lt;br&gt;";
   }
  
   final public function moreTesting() {
       echo "BaseClass::moreTesting() called&lt;br&gt;";
   }
}

class ChildClass extends BaseClass {
   public function moreTesting() {
       echo "ChildClass::moreTesting() called&lt;br&gt;";
   }
}
?&gt;
</pre></td></tr></tbody></table>
<h2>Calling parent constructors:</h2>
<p>Instead of writing an entirely new constructor for the subclass, 
let's write it by calling the parent's constructor explicitly and then 
doing whatever is necessary in addition for instantiation of the 
subclass. Here's a simple example:</p>
<table class="src" cellpadding="5"><tbody><tr><td><pre>class Name
{
   var $_firstName;
   var $_lastName;
   function Name($first_name, $last_name)
   {
     $this-&gt;_firstName = $first_name;
     $this-&gt;_lastName = $last_name;
   }
   function toString() {
     return($this-&gt;_lastName .", " .$this-&gt;_firstName);
   }
}
class NameSub1 extends Name
{
   var $_middleInitial;
   function NameSub1($first_name, $middle_initial, $last_name) {
       Name::Name($first_name, $last_name);
       $this-&gt;_middleInitial = $middle_initial;
   }
   function toString() {
       return(Name::toString() . " " . $this-&gt;_middleInitial);
   }
}
</pre></td></tr></tbody></table>
<p>In this example, we have a parent class (Name), which has a 
two-argument constructor, and a subclass (NameSub1), which has a 
three-argument constructor. The constructor of NameSub1 functions by 
calling its parent constructor explicitly using the :: syntax (passing 
two of its arguments along) and then setting an additional field. 
Similarly, NameSub1 defines its nonconstructor toString() function in 
terms of the parent function that it overrides.</p>
<p><b>NOTE:</b> A constructor can be defined  with the same name as the name of a class. It is defined in above example.</p>
<hr>
<a href="http://www.tutorialspoint.com/php/php_and_xml.htm"><img alt="previous" src="Object%20Oriented%20Programming%20in%20PHP_files/previous.gif" border="0"></a>
<a href="http://www.tutorialspoint.com/php/php_for_c_developers.htm"><img alt="next" src="Object%20Oriented%20Programming%20in%20PHP_files/next.gif" border="0"></a>
<a href="http://www.tutorialspoint.com/cgi-bin/printversion.cgi?tutorial=php&amp;file=php_object_oriented.htm" target="_blank">
<img src="Object%20Oriented%20Programming%20in%20PHP_files/print.gif" alt="Printer Friendly" border="0"></a>
<br>
<hr>
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="Object%20Oriented%20Programming%20in%20PHP_files/show_ads.js"></script><ins style="display:inline-table;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px"><ins id="aswift_1_anchor" style="display:block;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;" frameborder="0" height="280" scrolling="no" width="336"></iframe></ins></ins>
</td></tr>
</tbody></table>
</td>
<td class="right" align="center" valign="top">
<br><br>
<table cellpadding="0" cellspacing="0" width="100%">
<tbody><tr valign="middle">
<td class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</tbody></table>
<table class="right" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="right" align="center">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="Object%20Oriented%20Programming%20in%20PHP_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><ins id="aswift_2_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;" frameborder="0" height="600" scrolling="no" width="160"></iframe></ins></ins>
<br><br></td></tr></tbody></table>
</td></tr></tbody></table>
</center>


</body></html>